

timeInMilli() {
    millis := (A_hour*3600 + A_min*60 + A_sec)*1000 + A_msec
    Return millis
}

Now() {
    return timeInMilli()
}

#Warn All, Off
; mKeys := Map()
; mKeys["w"] := Map(keyName, "w", down, "w down", up, "w up")
; mKeys["space"] := Map(keyName, "space", down, "space down", up, "space up")
Class Key {
    __New(kn,tk) {
    this.name := "{" . kn . "}"
    this.keyName := kn 
    this.triggerKey := tk
this.down := "{" . kn . " down}"
this.up := "{" . kn . " up}"

}
}

Class Keys {
    static w := Key.new("w","w")
    static a := Key.new("a","a")
    static d := Key.new("d","d")
    static s := Key.new("s","s")
    static space := Key.new("Space", "XButton2")
}

Class Movement {
    
    __New(ByRef kn) {
        this.key := kn
        this.lastUsed := Now()
        
        this.lastRelease := 0
        this.count := 0
        this.history := [0]
    }
    press() {
        Send "{Blind}" this.key.name
        this.setMetaData()
    }
    pressAndHold() {
        Send this.key.down
        this.setMetaData()
    } 
    release() {
        if (!this.isHeldDown()) {
            Send this.key.up
        }
        this.setLastRelease()
    }
    setMetaData() {
        this.incrementCount()
        this.setLastUsed()
    }
    setReleaseMetaData() {
        this.setLastRelease()
    }
    setLastRelease() {
        this.lastRelease := Now()
    }
    setLastUsed() {
        this.lastUsed := Now()
    }
    incrementCount() {
        this.count += 1
        timeDiff := Now() - this.lastUsed
        this.history.Push(timeDiff)
    }
    isHeldDown() {
        return GetKeyState(this.key.triggerKey, "p")
    }
    timeSinceLastUsed() {
        return this.lastRelease == 0 ? -1 : Now() - this.lastRelease
    }
}
Class JumpMovement {
    __New() {
        this.key := Keys.space
        this.movement := Movement.new(this.key)
    }
    
    oneJump() {
        this.movement.press()
    }
    continousBHop() {
        static count := 0
        static history := []
        While this.movement.isHeldDown() {
            this.movement.press()
            Sleep 16
        }
    }
    ; silentJump(){
    ;     If (isCrouched != 1) {
    ;         ToggleCrouch()
    ;         Sleep 276
    ;     }
    ;     Jump()
    ;     If (isCrouched = 1) {
    ;         Sleep 575
    ;         ToggleCrouch()
    ;     }
    ; }
}
Class CharacterMovement {
    forwardMove := Movement.new(Keys.w)
    backwardMove := Movement.new(Keys.s)
    leftMove := Movement.new(Keys.a)
    rightMove := Movement.new(Keys.d)
    jump := JumpMovement.new()
    moveUntilFullSpeed(ByRef direction, time := 400) {
        this.forwardMove.pressAndHold()
        Sleep 400
    }
    releaseBHopMovement(ByRef direction) {
        if (!direction.isHeldDown()) {
            direction.release()
        }
    }
    isAtFullSpeed(ByRef direction) {
        return direction.isHeldDown() && direction.timeSinceLastUsed() > 400
    }
    continousBHopping() {
        direction := this.isAnyMovementKeyHeldDown() ? this.getHeldMovemenetKey() : this.forwardMove
        if (!this.isAtFullSpeed(direction)) {
            moveTime := direction.timeSinceLastUsed() > 0 ? Now() - direction.timeSinceLastUsed() : 400
            this.moveUntilFullSpeed(direction, moveTime)
        }
        While this.jump.movement.isHeldDown() {
            this.jump.movement.press()
            Sleep 16
        }
        this.releaseBHopMovement(direction)
    }
    isAnyMovementKeyHeldDown() {
        return this.forwardMove.isHeldDown() || this.leftMove.isHeldDown() || this.backwardMove.isHeldDown() || this.rightMove.isHeldDown() 
    }
    getHeldMovemenetKey() {
        if(this.leftMove.isHeldDown())
            return this.forwardMove
        else if (this.rightMove.isHeldDown()) 
            return this.rightMove
        else if (this.backwardMove.isHeldDown()) 
            return this.backwardMove
        else if (this.forwardMove.isHeldDown()) 
            return this.forwardMove
    }
}

Class CharacterState {
    isJett := 1
    isCrouched := 0
    isJumping := 0
    isBHopping := 0
    isDead := False
}

class GameCharacter {
    state := CharacterState.new()
    movements := CharacterMovement.new()
}
Class GameState {
    isInRound := True
    isInGame := True
}
Class Game {
    character := GameCharacter.new()
    state := GameState.new()
    
}

global g := Game.new()
SetKeyDelay 5
#HotIf WinActive("VALORANT")

~w::
    {
        g.character.movements.forwardMove.setMetaData()
    }
~w up::
    {
        g.character.movements.forwardMove.setReleaseMetaData()
    }
    
~a::
    {
        g.character.movements.leftMove.setMetaData()
    }
~a up::
    {
        g.character.movements.leftMove.setReleaseMetaData()
    }
~s::
    {
        g.character.movements.backwardMove.setMetaData()
    }
~s up::
    {
        g.character.movements.backwardMove.setReleaseMetaData()
    }
~d::
    {
        g.character.movements.rightMove.setMetaData()
    }
~d up::
    {
        g.character.movements.rightMove.setReleaseMetaData()
    }
    
    
    XButton2:: 
    {
        g.character.movements.continousBHopping()
    }
    
XButton2 up::
    {
        g.character.movements.jump.movement.release()
    }
    
    #HotIf
    
    ; global CONSTANTS := {
    ;    "time": {
    ;        jumpAppex: 325,
    ;        bhopLanding: 675,
    ;        runAcceleration: 400
    ;    }
    ; }
    
    ; global isContinousLeftClick := 0
    ; global isJett := 1
    ; global isShootStrafeDodge := 0
    ; global isCrouched := 0
    ; global isLeftWaitng := 0
    ; global TIME_TO_REACH_JUMP_APPEX := 325
    ; global TIME_TO_LAND_WITH_ACCURACY := 350 + 460
    
    ; global isBHopping := 0
    ; global timeSinceExec := 0
    ; global isWKeyHeld := 0
    ; global TIME_TILL_MAX_SPEED := 400
    ; global MovementKey
    
    ; Keys["!"] := Map(name, "!", down, "! down", up, "! up")
    
    ; global TIME_TO_BHOP := 675
    ; global DelayTime := 665
    ; global isJumping := 0
    ; global lastJump := 0
    ; global lastBHopDirection := 0
    ; global KEY_STROKE_DELAY := 80